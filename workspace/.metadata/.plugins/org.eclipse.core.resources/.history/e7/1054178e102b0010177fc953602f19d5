package proyecto.aplicacion.config;

import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Component;

import jakarta.transaction.Transactional;
import lombok.extern.slf4j.Slf4j;
import proyecto.aplicacion.models.entities.Cliente;
import proyecto.aplicacion.models.entities.Rol;
import proyecto.aplicacion.models.entities.Tarea;
import proyecto.aplicacion.models.entities.TipoTrabajo;
import proyecto.aplicacion.models.entities.Trabajo;
import proyecto.aplicacion.models.entities.Usuario;
import proyecto.aplicacion.repositories.IClienteRepository;
import proyecto.aplicacion.repositories.IRolRepository;
import proyecto.aplicacion.repositories.ITareaRepository;
import proyecto.aplicacion.repositories.ITipoTrabajoRepository;
import proyecto.aplicacion.repositories.ITrabajoRepository;
import proyecto.aplicacion.repositories.IUsuarioRepository;
import proyecto.aplicacion.utils.Constants;

@Component
@Slf4j
public class DataInitializer implements CommandLineRunner {
	
    @Autowired
    private IUsuarioRepository iUsuarioRepository;

    @Autowired
    private IRolRepository iRolRepository;
    
    @Autowired
    private IClienteRepository iClienteRepository;
    
    @Autowired
    private ITipoTrabajoRepository iTipoTrabajoRepository;
    
    @Autowired
    private ITrabajoRepository iTrabajoRepository;
    
    @Autowired
    private ITareaRepository iTareaRepository;

    @Autowired
    private BCryptPasswordEncoder passwordEncoder;
    
    @Transactional
    @Override
    public void init() {
        
        // Crear roles
        Rol adminRole = new Rol();
        adminRole.setNombre(Constants.ROLE_ADMIN);
        iRolRepository.save(adminRole);

        Rol userRole = new Rol();
        userRole.setNombre(Constants.ROLE_USER);
        iRolRepository.save(userRole);
        
        Rol equipoRole = new Rol();
        equipoRole.setNombre(Constants.ROLE_TEAM);
        iRolRepository.save(equipoRole);
	    
        // Crear clientes
        Cliente cliente1 = new Cliente();
        cliente1.setClienteId(1L);
        cliente1.setNombre("Cliente 1");
        cliente1.setPersonaContacto("Juan Pérez");
        cliente1.setEmailContacto("juan@cliente.com");
        cliente1.setMovil("123456789");
        cliente1.setTelefono("987654321");
        cliente1.setDireccion("Calle Falsa 123");
        iClienteRepository.save(cliente1);

        Cliente cliente2 = new Cliente();
        cliente2.setClienteId(2L);
        cliente2.setNombre("Cliente 2");
        cliente2.setPersonaContacto("Ana Gómez");
        cliente2.setEmailContacto("ana@cliente2.com");
        cliente2.setMovil("234567890");
        cliente2.setTelefono("876543210");
        cliente2.setDireccion("Avenida Siempre Viva 742");
        iClienteRepository.save(cliente2);
        
        // Crear usuarios
        Usuario usuario1 = new Usuario();
        usuario1.setEmail("juan@empresa.com");
        usuario1.setUsername("juan_admin");
        usuario1.setPassword("password123");
        usuario1.setRol(adminRole); // Asignar rol ADMIN
        iUsuarioRepository.save(usuario1);

        Usuario usuario2 = new Usuario();
        usuario2.setEmail("ana@empresa.com");
        usuario2.setUsername("ana_cliente");
        usuario2.setPassword("password123");
        usuario2.setRol(userRole); // Asignar rol USUARIO
        iUsuarioRepository.save(usuario2);
        
        Usuario usuario3 = new Usuario();
        usuario3.setEmail("pedro@empresa.com");
        usuario3.setUsername("pedro_equipo");
        usuario3.setPassword("password123");
        usuario3.setRol(equipoRole);
        iUsuarioRepository.save(usuario3);
        
        
     // Crear tipos de trabajo
        TipoTrabajo tipo1 = new TipoTrabajo();
        tipo1.setTipoTrabajo("Instalación");
        tipo1 = iTipoTrabajoRepository.save(tipo1); // guarda y actualiza con ID generado

        TipoTrabajo tipo2 = new TipoTrabajo();
        tipo2.setTipoTrabajo("Mantenimiento");
        tipo2 = iTipoTrabajoRepository.save(tipo2);
        
        // Crear trabajos
        Trabajo trabajo1 = new Trabajo();
        trabajo1.setCodigo("T-001");
        trabajo1.setOtTrabajo(1001);
        trabajo1.setTipoTrabajo(tipo1);
        trabajo1.setFechaInicioTrabajo(new Date());
        trabajo1.setFechaFinTrabajo(new Date());
        trabajo1.setPrioridadTrabajo("Alta");
        trabajo1.setDescripcion("Instalación de equipos de aire acondicionado");
        trabajo1.setCliente(cliente1);
        iTrabajoRepository.save(trabajo1);

        Trabajo trabajo2 = new Trabajo();
        trabajo2.setCodigo("T-002");
        trabajo2.setOtTrabajo(1002);
        trabajo2.setTipoTrabajo(tipo2);
        trabajo2.setFechaInicioTrabajo(new Date());
        trabajo2.setFechaFinTrabajo(new Date());
        trabajo2.setPrioridadTrabajo("Media");
        trabajo2.setDescripcion("Mantenimiento de sistemas de climatización");
        trabajo2.setCliente(cliente2);
        iTrabajoRepository.save(trabajo2);
        
        // Crear tareas para el trabajo 1
        Tarea tarea1 = new Tarea();
        tarea1.setTarea("Instalar unidades interiores");
        tarea1.setFechaInicioTarea(new Date());
        tarea1.setFechaFinTarea(new Date());
        tarea1.setPrioridadTarea("Alta");
        tarea1.setStatus("Pendiente");
        tarea1.setNotas("Requiere equipo especializado");
        tarea1.setMostrarCalendario(true);
        tarea1.setNotificacionEnviada(false);
        tarea1.setExpirada(false);
        tarea1.setTrabajo(trabajo1);
        tarea1.setResponsable(usuario1);  // Asignar responsable
        tarea1.setCliente(usuario2);      // Asignar cliente
        iTareaRepository.save(tarea1);

        Tarea tarea2 = new Tarea();
        tarea2.setTarea("Instalar unidades exteriores");
        tarea2.setFechaInicioTarea(new Date());
        tarea2.setFechaFinTarea(new Date());
        tarea2.setPrioridadTarea("Alta");
        tarea2.setStatus("Pendiente");
        tarea2.setNotas("Requiere grúa");
        tarea2.setMostrarCalendario(true);
        tarea2.setNotificacionEnviada(false);
        tarea2.setExpirada(false);
        tarea2.setTrabajo(trabajo1);
        tarea2.setResponsable(usuario1);  // Asignar responsable
        tarea2.setCliente(usuario2);      // Asignar cliente
        iTareaRepository.save(tarea2);

        Tarea tarea3 = new Tarea();
        tarea3.setTarea("Verificar refrigerante");
        tarea3.setFechaInicioTarea(new Date());
        tarea3.setFechaFinTarea(new Date());
        tarea3.setPrioridadTarea("Baja");
        tarea3.setStatus("Pendiente");
        tarea3.setNotas("Requiere medición de presión");
        tarea3.setMostrarCalendario(true);
        tarea3.setNotificacionEnviada(false);
        tarea3.setExpirada(false);
        tarea3.setTrabajo(trabajo1);
        tarea3.setResponsable(usuario1);  // Asignar responsable
        tarea3.setCliente(usuario2);      // Asignar cliente
        iTareaRepository.save(tarea3);
        
        // Crear tareas para el trabajo 2
        Tarea tarea4 = new Tarea();
        tarea4.setTarea("Mantenimiento de sistemas eléctricos");
        tarea4.setFechaInicioTarea(new Date());
        tarea4.setFechaFinTarea(new Date());
        tarea4.setPrioridadTarea("Media");
        tarea4.setStatus("Pendiente");
        tarea4.setNotas("Requiere revisión de circuitos");
        tarea4.setMostrarCalendario(true);
        tarea4.setNotificacionEnviada(false);
        tarea4.setExpirada(false);
        tarea4.setTrabajo(trabajo2);
        tarea4.setResponsable(usuario1);  // Asignar responsable
        tarea4.setCliente(usuario2);      // Asignar cliente
        iTareaRepository.save(tarea4);
	    
	    //Tengo que recordar quitar esto para cuando vaya a hacer el despliegue de la aplicación, tener contraseñas
	    //y usuarios con permisos sensibles en el código fuente no es seguro en el código, en su lugar puedo
	    // inicializar a un usuario admin desde la base de datos, que será un usuario general y se usará para
	    //cambiar el rol de los demás usuarios que necesiten tener el rol de administrador
	
	    // Verificar si ya existen los usuarios en la base de datos
	    if (iUsuarioRepository.count() == 0) {
	        // Crear usuario Admin
	        Rol rolAdmin = iRolRepository.findByNombre(Constants.ROLE_ADMIN);
	        Usuario usuarioAdmin = new Usuario();
	        usuarioAdmin.setEmail("correoAdmin@gmail.com");
	        usuarioAdmin.setUsername("UserAdmin");
	        usuarioAdmin.setPassword(passwordEncoder.encode("1234")); // Codificar la contraseña
	        usuarioAdmin.setRol(rolAdmin);
	        iUsuarioRepository.save(usuarioAdmin);
	        
	        //Crear usuario Equipo
	        Rol rolEquipo = iRolRepository.findByNombre(Constants.ROLE_TEAM);
	        Usuario usuarioTeam = new Usuario();
	        usuarioTeam.setEmail("correoTeam@gmail.com");
	        usuarioTeam.setUsername("UserTeam");
	        usuarioTeam.setPassword(passwordEncoder.encode("1234"));
	        usuarioTeam.setRol(rolEquipo);
	        iUsuarioRepository.save(usuarioTeam);
	
	        // Crear usuario User
	        Rol rolUser = iRolRepository.findByNombre(Constants.ROLE_USER);
	        Usuario usuarioUser = new Usuario();
	        usuarioUser.setEmail("correoUser@gmail.com");
	        usuarioUser.setUsername("UserUser");
	        usuarioUser.setPassword(passwordEncoder.encode("1234")); // Codificar la contraseña
	        usuarioUser.setRol(rolUser);
	        iUsuarioRepository.save(usuarioUser);
	
	        // Log para confirmar la creación
	        log.info("Usuarios de prueba creados: Admin y User.");
	    }
    }
}
